name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'workers/**'
      - 'frontend/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'workers/**'
      - 'frontend/**'
  workflow_dispatch:

jobs:
  # Deploy to staging on staging branch or PR
  deploy-staging:
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    runs-on: ubuntu-latest
    name: Deploy to Staging
    environment: staging
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: "Preflight: verify Cloudflare secrets (staging)"
        run: |
          if [ -z "${CLOUDFLARE_API_TOKEN}" ] || [ -z "${CLOUDFLARE_ACCOUNT_ID}" ]; then
            echo "::error::Missing Cloudflare secrets. Ensure CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID are set in repository or environment secrets."
            exit 1
          fi

      - name: Install dependencies
        run: npm install --no-audit --no-fund
        working-directory: workers

      - name: Run tests (if any)
        run: |
          # Add test commands here when you have tests
          echo "Tests would run here"
        working-directory: workers

      - name: Deploy to Cloudflare Workers (Staging)
        id: deploy-staging
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --config wrangler.staging.toml --compatibility-date 2024-01-10
          workingDirectory: workers
          wranglerVersion: '4'

      - name: Tail Wrangler log (last 120 lines)
        if: always()
        run: |
          LOG_DIR="$HOME/.config/.wrangler/logs"
          echo "Looking in $LOG_DIR"
          if [ -d "$LOG_DIR" ]; then
            LATEST_LOG=$(ls -1t "$LOG_DIR"/wrangler-*.log 2>/dev/null | head -n 1 || true)
            if [ -n "$LATEST_LOG" ] && [ -f "$LATEST_LOG" ]; then
              echo "=== Tail of $LATEST_LOG (last 120 lines) ==="
              tail -n 120 "$LATEST_LOG"
            else
              echo "No wrangler logs found in $LOG_DIR"
              ls -la "$LOG_DIR" || true
            fi
          else
            echo "Log directory not found: $LOG_DIR"
          fi

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Staging deployment complete!\n\n**Preview URL:** https://staging.sbconfig.com\n\nTest your changes before merging to production.'
            })

  # Deploy to production on main branch
  deploy-production:
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: "Preflight: verify Cloudflare secrets (production)"
        run: |
          if [ -z "${CLOUDFLARE_API_TOKEN}" ] || [ -z "${CLOUDFLARE_ACCOUNT_ID}" ]; then
            echo "::error::Missing Cloudflare secrets. Ensure CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID are set in repository or environment secrets."
            exit 1
          fi

      - name: Install dependencies
        run: npm install --no-audit --no-fund
        working-directory: workers

      - name: Run tests (if any)
        run: |
          # Add test commands here when you have tests
          echo "Tests would run here"
        working-directory: workers

      - name: Deploy to Cloudflare Workers (Production)
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --config wrangler.toml --compatibility-date 2024-01-10
          workingDirectory: workers
          wranglerVersion: '4'
        
      - name: Show deployment URL
        run: |
          echo "üöÄ Worker deployed successfully!"
          echo "üìç Check the deployment logs above for your actual workers.dev URL"
          echo "üìç It should be in the format: https://sbconfig.[subdomain].workers.dev"
          echo "üìç Custom domain will be available when sbconfig.com is configured in Cloudflare"
          echo ""
          echo "üîß To enable Lighthouse testing:"
          echo "   1. Copy your actual workers.dev URL from the logs"
          echo "   2. Update .github/workflows/deploy.yml with the correct URL"
          echo "   3. Change lighthouse job condition from 'if: false' to enable it"

      - name: Tail Wrangler log (last 120 lines)
        if: always()
        run: |
          LOG_DIR="$HOME/.config/.wrangler/logs"
          echo "Looking in $LOG_DIR"
          if [ -d "$LOG_DIR" ]; then
            LATEST_LOG=$(ls -1t "$LOG_DIR"/wrangler-*.log 2>/dev/null | head -n 1 || true)
            if [ -n "$LATEST_LOG" ] && [ -f "$LATEST_LOG" ]; then
              echo "=== Tail of $LATEST_LOG (last 120 lines) ==="
              tail -n 120 "$LATEST_LOG"
            else
              echo "No wrangler logs found in $LOG_DIR"
              ls -la "$LOG_DIR" || true
            fi
          else
            echo "Log directory not found: $LOG_DIR"
          fi

      - name: Create deployment status
        if: github.event.deployment
        uses: actions/github-script@v7
        with:
          script: |
            if (context.payload.deployment?.id) {
              github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: context.payload.deployment.id,
                state: 'success',
                environment_url: 'https://sbconfig.miskaone.workers.dev',
                description: 'Deployment to production successful'
              });
              console.log('‚úÖ Deployment status updated successfully');
            } else {
              console.log('‚ÑπÔ∏è No deployment context, skipping status update');
            }

  # Health check after deployment
  health-check:
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Production Health Check
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health Check
        run: |
          echo "Checking production health..."
          
          # Note: Update this URL once you know your actual workers.dev URL
          # For now, we'll skip health checks since we don't know the exact URL
          echo "‚ÑπÔ∏è Skipping health check - workers.dev URL not known at build time"
          echo "üìç Manually check: https://sbconfig.miskaone.workers.dev/health (or similar)"
          echo "üéâ Deployment completed successfully!"
          
          # Uncomment and update URL once you know your workers.dev subdomain:
          # if curl -f -s --max-time 10 https://sbconfig.miskaone.workers.dev/health > /dev/null; then
          #   echo "‚úÖ Worker is healthy"
          # else
          #   echo "‚ùå Worker health check failed"
          #   exit 1
          # fi

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Production Deployment Health Check Failed',
              body: `Production deployment health check failed for commit ${context.sha}.\n\nPlease investigate immediately.\n\n**Commit:** ${context.sha}\n**Workflow:** ${context.workflow}\n**Run:** ${context.runId}`
            })

  # Lighthouse performance test (optional - disabled until custom domain is configured)
  lighthouse:
    needs: [deploy-production]
    # Disabled until we have a confirmed working URL
    if: false # Change to 'github.ref == 'refs/heads/main' && github.event_name == 'push'' when ready
    runs-on: ubuntu-latest
    name: Lighthouse Performance Test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 45

      - name: Skip Lighthouse (URL not confirmed)
        run: |
          echo "üîÑ Lighthouse test skipped - workers.dev URL not confirmed yet"
          echo "üìù To enable:"
          echo "  1. Find your actual workers.dev URL from deployment logs"
          echo "  2. Update the URL in this workflow"
          echo "  3. Change 'if: false' to 'if: github.ref == \"refs/heads/main\"'"

      # Uncomment and update URL when ready:
      # - name: Lighthouse CI
      #   uses: treosh/lighthouse-ci-action@v10
      #   with:
      #     urls: |
      #       https://your-actual-subdomain.workers.dev
      #     configPath: './.lighthouserc.json'
      #     uploadArtifacts: true
      #     temporaryPublicStorage: true
