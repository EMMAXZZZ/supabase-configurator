name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'workers/**'
      - 'frontend/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'workers/**'
      - 'frontend/**'
  workflow_dispatch:

jobs:
  # Deploy to staging on staging branch or PR
  deploy-staging:
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    runs-on: ubuntu-latest
    name: Deploy to Staging
    environment: staging
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: "Preflight: verify Cloudflare secrets (staging)"
        run: |
          if [ -z "${CLOUDFLARE_API_TOKEN}" ] || [ -z "${CLOUDFLARE_ACCOUNT_ID}" ]; then
            echo "::error::Missing Cloudflare secrets. Ensure CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID are set in repository or environment secrets."
            exit 1
          fi

      - name: Install dependencies
        run: npm install --no-audit --no-fund
        working-directory: workers

      - name: Run tests (if any)
        run: |
          # Add test commands here when you have tests
          echo "Tests would run here"
        working-directory: workers

      - name: Deploy to Cloudflare Workers (Staging)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --config wrangler.staging.toml
          workingDirectory: workers
          wranglerVersion: '4'

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Staging deployment complete!\n\n**Preview URL:** https://staging.sbconfig.com\n\nTest your changes before merging to production.'
            })

  # Deploy to production on main branch
  deploy-production:
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: "Preflight: verify Cloudflare secrets (production)"
        run: |
          if [ -z "${CLOUDFLARE_API_TOKEN}" ] || [ -z "${CLOUDFLARE_ACCOUNT_ID}" ]; then
            echo "::error::Missing Cloudflare secrets. Ensure CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID are set in repository or environment secrets."
            exit 1
          fi

      - name: Install dependencies
        run: npm install --no-audit --no-fund
        working-directory: workers

      - name: Run tests (if any)
        run: |
          # Add test commands here when you have tests
          echo "Tests would run here"
        working-directory: workers

      - name: Deploy to Cloudflare Workers (Production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --config wrangler.toml
          workingDirectory: workers
          wranglerVersion: '4'

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              environment_url: 'https://sbconfig.com',
              description: 'Deployment to production successful'
            })

  # Health check after deployment
  health-check:
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Production Health Check
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health Check
        run: |
          echo "Checking production health..."
          
          # Check main domain
          if curl -f -s --max-time 10 https://sbconfig.com/health > /dev/null; then
            echo "‚úÖ sbconfig.com is healthy"
          else
            echo "‚ùå sbconfig.com health check failed"
            exit 1
          fi
          
          # Check www redirect
          if curl -f -s --max-time 10 https://www.sbconfig.com/health > /dev/null; then
            echo "‚úÖ www.sbconfig.com is healthy"
          else
            echo "‚ùå www.sbconfig.com health check failed"
            exit 1
          fi
          
          echo "üéâ All health checks passed!"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Production Deployment Health Check Failed',
              body: `Production deployment health check failed for commit ${context.sha}.\n\nPlease investigate immediately.\n\n**Commit:** ${context.sha}\n**Workflow:** ${context.workflow}\n**Run:** ${context.runId}`
            })

  # Lighthouse performance test (optional)
  lighthouse:
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Lighthouse Performance Test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 45

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://sbconfig.com
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
