name: Deploy Frontend to Cloudflare Pages

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'frontend/**'
  workflow_dispatch:

jobs:
  # Deploy to staging on staging branch or PR
  deploy-staging:
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    runs-on: ubuntu-latest
    name: Deploy Frontend to Staging
    environment: staging
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: "Preflight: verify Cloudflare secrets (staging)"
        run: |
          if [ -z "${CLOUDFLARE_API_TOKEN}" ] || [ -z "${CLOUDFLARE_ACCOUNT_ID}" ]; then
            echo "::error::Missing Cloudflare secrets. Ensure CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID are set in repository or environment secrets."
            exit 1
          fi

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Build frontend for Cloudflare Pages
        run: npm run build
        working-directory: frontend
        env:
          NODE_ENV: production

      - name: Deploy to Cloudflare Pages (Staging)
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          projectName: supabase-configurator-staging
          directory: frontend/out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Frontend staging deployment complete!\\n\\n**Preview URL:** https://supabase-configurator-staging.pages.dev\\n\\nTest your changes before merging to production.'
            })

  # Deploy to production on main branch
  deploy-production:
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    name: Deploy Frontend to Production
    environment: production
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: "Preflight: verify Cloudflare secrets (production)"
        run: |
          if [ -z "${CLOUDFLARE_API_TOKEN}" ] || [ -z "${CLOUDFLARE_ACCOUNT_ID}" ]; then
            echo "::error::Missing Cloudflare secrets. Ensure CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID are set in repository or environment secrets."
            exit 1
          fi

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Run typecheck
        run: npm run typecheck
        working-directory: frontend

      - name: Run linting
        run: npm run lint
        working-directory: frontend

      - name: Build frontend for Cloudflare Pages
        run: npm run build
        working-directory: frontend
        env:
          NODE_ENV: production

      - name: Deploy to Cloudflare Pages (Production)
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          projectName: supabase-configurator
          directory: frontend/out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Show deployment URL
        run: |
          echo "üöÄ Frontend deployed successfully to Cloudflare Pages!"
          echo "üìç Production URL: https://supabase-configurator.pages.dev"
          echo "üìç Custom domain can be configured in Cloudflare Pages dashboard"
          echo ""
          echo "üîß Next steps:"
          echo "   1. Configure custom domain in Cloudflare Pages dashboard"
          echo "   2. Update DNS records to point to Cloudflare Pages"
          echo "   3. Enable Lighthouse testing with confirmed URL"

  # Health check after deployment
  health-check:
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Production Health Check
    steps:
      - name: Wait for deployment
        run: sleep 45

      - name: Health Check
        run: |
          echo "Checking production health..."
          # Test the Cloudflare Pages deployment
          URL="https://supabase-configurator.pages.dev"
          
          if curl -f -s --max-time 10 "$URL" > /dev/null; then
            echo "‚úÖ Frontend is accessible at $URL"
          else
            echo "‚ùå Frontend health check failed"
            echo "üîç Manual check required at $URL"
            # Don't fail workflow since URL might be different initially
          fi

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Production Frontend Deployment Failed',
              body: `Production frontend deployment failed for commit ${context.sha}.\\n\\nPlease investigate immediately.\\n\\n**Commit:** ${context.sha}\\n**Workflow:** ${context.workflow}\\n**Run:** ${context.runId}`
            })

  # Lighthouse performance test
  lighthouse:
    needs: [deploy-production]
    if: false # Enable once URL is confirmed: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Lighthouse Performance Test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 60

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://supabase-configurator.pages.dev
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true