"""Environment (.env) file generation (skeleton)."""
from __future__ import annotations

from typing import Dict
from urllib.parse import quote

from jinja2 import Template

ENV_TEMPLATE = Template(
    """
# Generated by Supabase Config Generator
POSTGRES_PASSWORD={{ postgres_password }}
# URL-encoded variant for safe use in connection strings
POSTGRES_PASSWORD_URLENC={{ postgres_password_urlenc }}
SMTP_PASS={{ smtp_pass }}
SITE_URL={{ site_url }}
""".strip()
)


def render_env(context: Dict[str, str]) -> str:
    """Render .env content from a context dict.

    Args:
        context (Dict[str, str]): Values to render.

    Returns:
        str: Rendered file content.
    """
    # Compute URL-encoded password for use in connection strings
    ctx: Dict[str, str] = dict(context)
    if ctx.get("postgres_password"):
        ctx["postgres_password_urlenc"] = quote(str(ctx["postgres_password"]), safe="")

    # Allow optional security values from Step 2; include only if provided
    return Template(
        """
        # Generated by Supabase Config Generator
        {% if postgres_password is defined and postgres_password %}POSTGRES_PASSWORD={{ postgres_password }}{% endif %}
        {% if postgres_password_urlenc is defined and postgres_password_urlenc %}POSTGRES_PASSWORD_URLENC={{ postgres_password_urlenc }}{% endif %}
        {% if jwt_secret is defined and jwt_secret %}JWT_SECRET={{ jwt_secret }}{% endif %}
        {% if anon_key is defined and anon_key %}ANON_KEY={{ anon_key }}{% endif %}
        {% if service_role_key is defined and service_role_key %}SERVICE_ROLE_KEY={{ service_role_key }}{% endif %}
        {% if dashboard_password is defined and dashboard_password %}DASHBOARD_PASSWORD={{ dashboard_password }}{% endif %}
        {% if smtp_pass is defined and smtp_pass %}SMTP_PASS={{ smtp_pass }}{% endif %}
        {% if site_url is defined and site_url %}SITE_URL={{ site_url }}{% endif %}
        """.strip()
    ).render(**ctx)
